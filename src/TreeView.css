/* --- CSS for React Virtualized Tree View --- */

/* Main container */
.tree-view-container {
  height: 500px;
  overflow-y: auto;
  overflow-x: auto;
  border: 1px solid #ccc;
  font-family: sans-serif;
  border-radius: 8px;
  position: relative;
  color: #666;
}
.tree-view-container:focus {
    outline: 2px solid dodgerblue;
    outline-offset: 1px;
}

/* Individual node row container (Positioned by virtualizer) */
.tree-node {
  user-select: none;
  white-space: nowrap; /* Prevent wrapping within the node itself */
  border-bottom: 1px solid #eee;
  box-sizing: border-box;
  /* **MODIFIED:** Background styles ARE applied here */
  background-color: #fff; /* Default background */
  transition: background-color 0.1s ease-in-out;
  /* **MODIFIED:** Ensure node takes at least full width but can grow */
  min-width: 100%;
  width: max-content; /* Allow node to grow with content */
  /* display: flex; */ /* Removed flex here, let content handle layout */
  /* align-items: stretch; */
}

/* Selection style on the main node element */
.tree-node.selected {
  background-color: #e0efff;
  font-weight: 500;
}
.tree-node.selected:hover {
    background-color: #d0eaff;
}

/* Move target candidate style on the main node element */
.tree-node.move-target-candidate:not(.selected) {
    background-color: #f0fff0;
}
.tree-node.move-target-candidate:not(.selected):hover {
    background-color: #e0ffe0;
}

/* Keyboard focus outline on the main positioned element */
.tree-node.selected {
   /* Optional: Add outline ONLY when container has focus */
   /* .tree-view-container:focus & { outline: 1px dashed #0056b3; outline-offset: -1px; } */
}


/* Inner content wrapper */
.node-content {
  /* **MODIFIED:** Use inline-flex, allow natural width, ensure height */
  display: inline-flex; /* Important: Sizes to content */
  align-items: center;
  width: max-content; /* Explicitly size to content */
  min-width: 100%; /* Ensure it fills at least the parent's initial width */
  height: 100%; /* Take full height from parent */
  padding: 0 5px;
  cursor: pointer;
  box-sizing: border-box;
  /* Removed background styles */
}


/* Indentation lines container */
.indent-lines {
    display: flex;
    align-self: stretch; /* Stretch lines vertically */
    flex-shrink: 0;
}
/* Indentation line segment */
.indent-line {
    display: inline-block;
    width: 20px;
    position: relative;
    box-sizing: border-box;
    border-left: 1px solid #e0e0e0;
}

/* Toggle icon */
.toggle {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 20px;
  height: 20px;
  align-self: center;
  text-align: center;
  font-size: 0.8em;
  color: #666;
  flex-shrink: 0;
  cursor: pointer;
  border-radius: 4px;
  transition: background-color 0.1s ease-in-out;
  box-sizing: border-box;
}
.toggle:hover {
    background-color: rgba(0, 0, 0, 0.05);
}
.toggle.placeholder {
  visibility: hidden;
  cursor: default;
}
.toggle.placeholder:hover {
    background-color: transparent;
}

/* Node icon */
.node-icon {
    display: inline-block;
    margin-right: 4px;
    flex-shrink: 0;
    line-height: 1;
    align-self: center;
}

/* Node name text */
.node-name {
   align-self: center;
   white-space: nowrap; /* Ensure name itself doesn't wrap */
}

/* Status/Error messages */
.status-message { padding: 20px; text-align: center; font-style: italic; color: #555; border: 1px solid #ccc; border-radius: 8px; }
.status-message:not(.overlay-error) { height: 500px; display: flex; justify-content: center; align-items: center; }
.status-message.error { color: #d9534f; font-weight: bold; background-color: rgba(255, 230, 230, 0.9); border-color: #d9534f; }
.overlay-error { position: absolute; bottom: 10px; left: 10px; right: 10px; z-index: 10; padding: 10px; border-radius: 4px; }

/* Spinner */
.spinner { display: inline-block; border: 3px solid rgba(100, 100, 100, 0.3); border-radius: 50%; border-top-color: #666; width: 12px; height: 12px; animation: spin 1s ease-in-out infinite; }
@keyframes spin { to { transform: rotate(360deg); } }
